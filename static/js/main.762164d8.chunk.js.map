{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","candidateInfo","setCandidateInfo","FetchArrayOfIds","props","url","fetch","then","response","json","handleJSON","catch","e","console","log","results","length","Error","urls","map","prop","Promise","all","r","activeThroughDates","object","active_through","mostRecentDateIndex","indexOf","Math","max","GetCandidateFromId","FindMostRecentId","result","id","className","input","setInput","onSubmit","preventDefault","currentTarget","candidateName","value","type","name","onChange","candidate_id","party_full","address_street_1","address_city","address_state","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"2MAwGeA,MAtGf,WAAgB,IAAD,EAE6BC,mBAAS,IAFtC,mBAENC,EAFM,KAESC,EAFT,KAIb,SAASC,EAAgBC,GACvB,IAAMC,EAAG,0DAAsDD,EAAtD,qDACTE,MAAMD,GACHE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACE,GACLC,EAAWD,MAEZE,OAAM,SAACC,GACNC,QAAQC,IAAIF,MAGhB,IAAMF,EAAa,SAACD,GAClB,IAAIM,EAAUN,EAAKM,QACnB,GAAuB,IAAnBA,EAAQC,OACV,MAAMC,MAAM,kBAQlB,SAA0Bb,GACxB,IAGIc,EAAOd,EAAMe,KAAI,SAAAC,GAAI,OAHb,SAAChB,GACX,MAAM,yCAAN,OAAgDA,EAAhD,mJAE2BC,CAAIe,MACjCC,QAAQC,IAAIJ,EAAKC,KAAI,SAAAd,GAAG,OAAIC,MAAMD,GAC/BE,MAAK,SAAAgB,GAAC,OAAIA,EAAEd,cAEZF,MAAK,SAACE,GACLC,EAAWD,MAGf,IAAMC,EAAa,SAACD,GAClB,IAAIe,EAAqBf,EAAKU,KAAI,SAAAM,GAAM,OAAIA,EAAOV,QAAQ,GAAGW,kBAC1DC,EAAsBH,EAAmBI,QAAQC,KAAKC,IAAL,MAAAD,KAAI,YAAQL,MAOrE,SAA4BpB,GAC1B,IAAMC,EAAG,gDAA4CD,EAA5C,mJACTE,MAAMD,GACHE,MAAK,SAAAgB,GAAC,OAAIA,EAAEd,UACZF,MAAK,SAAAgB,GACJrB,EAAiBqB,EAAER,QAAQ,OAV7BgB,CADmB3B,EAAMuB,KApBvBK,CADcjB,EAAQI,KAAI,SAAAc,GAAM,OAAIA,EAAOC,QAgEjD,OACE,yBAAKC,UAAU,OACb,mBAxBJ,WAAsB,IAAD,EACOnC,mBAAS,IADhB,mBACZoC,EADY,KACLC,EADK,KAanB,OACE,0BAAMC,SANa,SAAC1B,GACpBA,EAAE2B,iBACFpC,EAAgBS,EAAE4B,cAAcC,cAAcC,SAK5C,kDACA,2BAAOC,KAAK,OAAOC,KAAK,gBAAgBC,SAblB,SAACjC,GAAD,OAAOyB,EAAS,eACrCD,EADoC,eAEtCxB,EAAE4B,cAAcI,KAAOhC,EAAE4B,cAAcE,YAYtC,2BAAOC,KAAK,cAOd,MACA,oDACC1C,EAAc6C,aAHjB,IAG+B,6BAC5B7C,EAAc2C,KAJjB,IAIuB,6BACpB3C,EAAc8C,WALjB,IAK6B,6BAC1B9C,EAAcyB,eANjB,IAMiC,6BAC9BzB,EAAc+C,iBAPjB,IAOmC,6BAChC/C,EAAcgD,aARjB,IAQ+B,6BAC5BhD,EAAciD,cATjB,IASgC,6BAC9B,gCCrFcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvD,MAAK,SAAAwD,GACJA,EAAaC,gBAEdrD,OAAM,SAAAsD,GACLpD,QAAQoD,MAAMA,EAAMC,a","file":"static/js/main.762164d8.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction App() {\n\n  const [candidateInfo, setCandidateInfo] = useState([]);\n\n  function FetchArrayOfIds(props) {\n    const url = `https://api.open.fec.gov/v1/names/candidates/?q=${props}&api_key=SVuK6wlixoKEc7Ccdd7X2paVLHTAjGjJUZdlzAMp`\n    fetch(url)\n      .then(response => response.json())\n      .then((json) => {\n        handleJSON(json);\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n\n    const handleJSON = (json) => {\n      let results = json.results;\n      if (results.length === 0) {\n        throw Error(\"Invalid Entry\");\n      } else {\n        let idArray = results.map(result => result.id);\n        FindMostRecentId(idArray);\n      }\n    }\n  }\n\n  function FindMostRecentId(props) {\n    const url = (props) => {\n      return `https://api.open.fec.gov/v1/candidate/${props}/?sort_nulls_last=false&sort_null_only=false&per_page=20&page=1&sort=name&api_key=SVuK6wlixoKEc7Ccdd7X2paVLHTAjGjJUZdlzAMp&sort_hide_null=false`\n    }\n    let urls = props.map(prop => url(prop));\n    Promise.all(urls.map(url => fetch(url)\n      .then(r => r.json())\n    ))\n      .then((json) => {\n        handleJSON(json);\n      })\n\n    const handleJSON = (json) => {\n      let activeThroughDates = json.map(object => object.results[0].active_through);\n      let mostRecentDateIndex = activeThroughDates.indexOf(Math.max(...activeThroughDates));\n      let mostRecentId = props[mostRecentDateIndex];\n      GetCandidateFromId(mostRecentId);\n    }\n  }\n\n\n  function GetCandidateFromId(props) {\n    const url = `https://api.open.fec.gov/v1/candidate/${props}/?sort_nulls_last=false&sort_null_only=false&per_page=20&page=1&sort=name&api_key=SVuK6wlixoKEc7Ccdd7X2paVLHTAjGjJUZdlzAMp&sort_hide_null=false`\n    fetch(url)\n      .then(r => r.json())\n      .then(r => {\n        setCandidateInfo(r.results[0]);\n      });\n  }\n\n  // function FetchHistory() { }\n  // function FetchCommittees() { }\n  // function FetchFinancial() { }\n  // function FetchLoans() { }\n  // function FetchDates() { }\n\n  function SearchBar() {\n    const [input, setInput] = useState({});\n\n    const handleInputChange = (e) => setInput({\n      ...input,\n      [e.currentTarget.name]: e.currentTarget.value\n    })\n\n    const handleSubmit = (e) => {\n      e.preventDefault();\n      FetchArrayOfIds(e.currentTarget.candidateName.value);\n    }\n\n    return (\n      <form onSubmit={handleSubmit}>\n        <label>Candidate Name:</label>\n        <input type=\"text\" name=\"candidateName\" onChange={handleInputChange} />\n        <input type=\"submit\" />\n      </form>\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <SearchBar />\n      <h2>Candidates and Party</h2>\n      {candidateInfo.candidate_id} <br />\n      {candidateInfo.name} <br />\n      {candidateInfo.party_full} <br />\n      {candidateInfo.active_through} <br />\n      {candidateInfo.address_street_1} <br />\n      {candidateInfo.address_city} <br />\n      {candidateInfo.address_state} <br />\n      <div>\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}