{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","firstCandidateInfo","setFirstCandidateInfo","secondCandidateInfo","setSecondCandidateInfo","FetchArrayOfIds","name","number","url","fetch","then","response","json","handleJSON","catch","e","console","log","results","length","Error","idArray","urls","map","id","Promise","all","r","activeThroughDates","object","active_through","mostRecentDateIndex","indexOf","Math","max","mostRecentId","GetCandidateFromId","FindMostRecentId","result","className","input","setInput","handleInputChange","currentTarget","value","onSubmit","preventDefault","firstCandidateName","secondCandidateName","type","onChange","Tabs","defaultActiveKey","Tab","eventKey","title","candidate_id","party_full","address_street_1","address_city","address_state","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"2QA6HeA,MAxHf,WAAgB,IAAD,EAEuCC,mBAAS,IAFhD,mBAENC,EAFM,KAEcC,EAFd,OAGyCF,mBAAS,IAHlD,mBAGNG,EAHM,KAGeC,EAHf,KAKb,SAASC,EAAgBC,EAAMC,GAC7B,IAAMC,EAAG,0DAAsDF,EAAtD,qDACTG,MAAMD,GACHE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACE,GACLC,EAAWD,MAEZE,OAAM,SAACC,GACNC,QAAQC,IAAIF,MAGhB,IAAMF,EAAa,SAACD,GAClB,IAAIM,EAAUN,EAAKM,QACnB,GAAuB,IAAnBA,EAAQC,OACV,MAAMC,MAAM,kBAQlB,SAA0BC,EAASd,GACjC,IAGIe,EAAOD,EAAQE,KAAI,SAAAC,GAAE,OAHb,SAACA,GACX,MAAM,yCAAN,OAAgDA,EAAhD,mJAE2BhB,CAAIgB,MACjCC,QAAQC,IAAIJ,EAAKC,KAAI,SAAAf,GAAG,OAAIC,MAAMD,GAC/BE,MAAK,SAAAiB,GAAC,OAAIA,EAAEf,cAEZF,MAAK,SAACE,GACLC,EAAWD,MAGf,IAAMC,EAAa,SAACD,GAClB,IAAIgB,EAAqBhB,EAAKW,KAAI,SAAAM,GAAM,OAAIA,EAAOX,QAAQ,GAAGY,kBAC1DC,EAAsBH,EAAmBI,QAAQC,KAAKC,IAAL,MAAAD,KAAI,YAAQL,MAMrE,SAA4BO,EAAc5B,GACxC,IAAMC,EAAG,gDAA4C2B,EAA5C,mJACT1B,MAAMD,GACHE,MAAK,SAAAiB,GAAC,OAAIA,EAAEf,UACZF,MAAK,SAAAiB,GACW,IAAXpB,EACFL,EAAsByB,EAAET,QAAQ,IACZ,IAAXX,GACTH,EAAuBuB,EAAET,QAAQ,OAZrCkB,CADmBf,EAAQU,GACMxB,IArB/B8B,CADcnB,EAAQK,KAAI,SAAAe,GAAM,OAAIA,EAAOd,MACjBjB,IAoEhC,OACE,yBAAKgC,UAAU,OACb,mBA1BJ,WAAsB,IAAD,EACOvC,mBAAS,IADhB,mBACZwC,EADY,KACLC,EADK,KAGbC,EAAoB,SAAC3B,GAAD,OAAO0B,EAAS,eACrCD,EADoC,eAEtCzB,EAAE4B,cAAcrC,KAAOS,EAAE4B,cAAcC,UAS1C,OACE,0BAAMC,SAPa,SAAC9B,GACpBA,EAAE+B,iBACFzC,EAAgBU,EAAE4B,cAAcI,mBAAmBH,MAAO,GAC1DvC,EAAgBU,EAAE4B,cAAcK,oBAAoBJ,MAAO,KAKzD,kDACA,2BAAOK,KAAK,OAAO3C,KAAK,qBAAqB4C,SAAUR,IACvD,2BAAOO,KAAK,OAAO3C,KAAK,sBAAsB4C,SAAUR,IACxD,2BAAOO,KAAK,cAOd,MACA,oDACA,kBAACE,EAAA,EAAD,CAAMC,iBAAiB,kBACrB,kBAACC,EAAA,EAAD,CAAKC,SAAS,iBAAiBC,MAAM,KAElCtD,EAAmBuD,aAFtB,IAEoC,6BACjCvD,EAAmBK,KAHtB,IAG4B,6BACzBL,EAAmBwD,WAJtB,IAIkC,6BAC/BxD,EAAmB6B,eALtB,IAKsC,6BACnC7B,EAAmByD,iBANtB,IAMwC,6BACrCzD,EAAmB0D,aAPtB,IAOoC,6BACjC1D,EAAmB2D,cARtB,IAQqC,8BAGrC,kBAACP,EAAA,EAAD,CAAKC,SAAS,kBAAkBC,MAAM,KACnCpD,EAAoBqD,aADvB,IACqC,6BAClCrD,EAAoBG,KAFvB,IAE6B,6BAC1BH,EAAoBsD,WAHvB,IAGmC,6BAChCtD,EAAoB2B,eAJvB,IAIuC,6BACpC3B,EAAoBuD,iBALvB,IAKyC,6BACtCvD,EAAoBwD,aANvB,IAMqC,6BAClCxD,EAAoByD,cAPvB,IAOsC,iCC1G1BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9D,MAAK,SAAA+D,GACJA,EAAaC,gBAEd5D,OAAM,SAAA6D,GACL3D,QAAQ2D,MAAMA,EAAMC,c","file":"static/js/main.b5e567ad.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\n\nfunction App() {\n\n  const [firstCandidateInfo, setFirstCandidateInfo] = useState([]);\n  const [secondCandidateInfo, setSecondCandidateInfo] = useState([]);\n\n  function FetchArrayOfIds(name, number) {\n    const url = `https://api.open.fec.gov/v1/names/candidates/?q=${name}&api_key=SVuK6wlixoKEc7Ccdd7X2paVLHTAjGjJUZdlzAMp`\n    fetch(url)\n      .then(response => response.json())\n      .then((json) => {\n        handleJSON(json);\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n\n    const handleJSON = (json) => {\n      let results = json.results;\n      if (results.length === 0) {\n        throw Error(\"Invalid Entry\");\n      } else {\n        let idArray = results.map(result => result.id);\n        FindMostRecentId(idArray, number);\n      }\n    }\n  }\n\n  function FindMostRecentId(idArray, number) {\n    const url = (id) => {\n      return `https://api.open.fec.gov/v1/candidate/${id}/?sort_nulls_last=false&sort_null_only=false&per_page=20&page=1&sort=name&api_key=SVuK6wlixoKEc7Ccdd7X2paVLHTAjGjJUZdlzAMp&sort_hide_null=false`\n    }\n    let urls = idArray.map(id => url(id));\n    Promise.all(urls.map(url => fetch(url)\n      .then(r => r.json())\n    ))\n      .then((json) => {\n        handleJSON(json);\n      })\n\n    const handleJSON = (json) => {\n      let activeThroughDates = json.map(object => object.results[0].active_through);\n      let mostRecentDateIndex = activeThroughDates.indexOf(Math.max(...activeThroughDates));\n      let mostRecentId = idArray[mostRecentDateIndex];\n      GetCandidateFromId(mostRecentId, number);\n    }\n  }\n\n  function GetCandidateFromId(mostRecentId, number) {\n    const url = `https://api.open.fec.gov/v1/candidate/${mostRecentId}/?sort_nulls_last=false&sort_null_only=false&per_page=20&page=1&sort=name&api_key=SVuK6wlixoKEc7Ccdd7X2paVLHTAjGjJUZdlzAMp&sort_hide_null=false`\n    fetch(url)\n      .then(r => r.json())\n      .then(r => {\n        if (number === 1) {\n          setFirstCandidateInfo(r.results[0]);\n        } else if (number === 2) {\n          setSecondCandidateInfo(r.results[0]);\n        }\n      });\n  }\n\n  // function FetchHistory() { }\n  // function FetchCommittees() { }\n  // function FetchFinancial() { }\n  // function FetchLoans() { }\n  // function FetchDates() { }\n\n  function SearchBar() {\n    const [input, setInput] = useState({});\n\n    const handleInputChange = (e) => setInput({\n      ...input,\n      [e.currentTarget.name]: e.currentTarget.value\n    })\n\n    const handleSubmit = (e) => {\n      e.preventDefault();\n      FetchArrayOfIds(e.currentTarget.firstCandidateName.value, 1);\n      FetchArrayOfIds(e.currentTarget.secondCandidateName.value, 2);\n    }\n\n    return (\n      <form onSubmit={handleSubmit}>\n        <label>Candidate Name:</label>\n        <input type=\"text\" name=\"firstCandidateName\" onChange={handleInputChange} />\n        <input type=\"text\" name=\"secondCandidateName\" onChange={handleInputChange} />\n        <input type=\"submit\" />\n      </form>\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <SearchBar />\n      <h2>Candidates and Party</h2>\n      <Tabs defaultActiveKey=\"firstCandidate\">\n        <Tab eventKey=\"firstCandidate\" title=\"1\">\n\n          {firstCandidateInfo.candidate_id} <br />\n          {firstCandidateInfo.name} <br />\n          {firstCandidateInfo.party_full} <br />\n          {firstCandidateInfo.active_through} <br />\n          {firstCandidateInfo.address_street_1} <br />\n          {firstCandidateInfo.address_city} <br />\n          {firstCandidateInfo.address_state} <br />\n\n        </Tab>\n        <Tab eventKey=\"secondCandidate\" title=\"2\">\n          {secondCandidateInfo.candidate_id} <br />\n          {secondCandidateInfo.name} <br />\n          {secondCandidateInfo.party_full} <br />\n          {secondCandidateInfo.active_through} <br />\n          {secondCandidateInfo.address_street_1} <br />\n          {secondCandidateInfo.address_city} <br />\n          {secondCandidateInfo.address_state} <br />\n        </Tab>\n      </Tabs>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}